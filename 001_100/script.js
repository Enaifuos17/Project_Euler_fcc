// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------

/* 

  * P1: Multiples of 3 and 5

  If we list all the natural numbers below 10 
  that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
  The sum of these multiples is 23.

  Find the sum of all the multiples of 3 or 5 below 
  the provided parameter value number.

*/

function multiplesOf3and5(number) {
  let multiples = [];
  for (let i = 1; i < number; i++) {
    if (i % 3 === 0 || i % 5 === 0) {
      multiples.push(i);
    }
  }
  let result = multiples.reduce((prev, next) => {
    return prev + next;
  });
  return result;
}

console.log(multiplesOf3and5(10)); // 23
console.log(multiplesOf3and5(49)); // 543
console.log(multiplesOf3and5(1000)); // 233168
console.log(multiplesOf3and5(8456)); // 16687353
console.log(multiplesOf3and5(19564)); // 89301183

// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------

/* 

  * P2: Even Fibonacci Numbers

  Each new term in the Fibonacci sequence is 
  generated by adding the previous two terms. 

  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence 
  whose values do not exceed n, 
  find the sum of the even-valued terms.

*/

function fiboEvenSum(n) {
  let prevNumber = 0;
  let currentNumber = 1;
  let sequence = [0, 1];
  let sum = 0;

  // function to get the Fibonacci numbers that are lessThan or equal to "num"
  function getFibonacciNumbers() {
    for (let i = 0; currentNumber <= n; i++) {
      currentNumber += prevNumber;
      // check again after the += if currenNumber <= num
      if (currentNumber <= n) {
        sequence.push(currentNumber);
      }
      // intialize the prevNumber
      prevNumber = currentNumber - prevNumber;
    }
    return sequence;
  }

  // to know the Fibonacci sequence
  // console.log(getFibonacciNumbers());

  // filter and get the EVEN numbers
  let evenNumbers = getFibonacciNumbers().filter((el) => el % 2 === 0);

  // SUM of the even numbers
  sum = evenNumbers.reduce((prev, next) => prev + next);

  return sum;
}

console.log(fiboEvenSum(8)); // 10
console.log(fiboEvenSum(10)); // 10
console.log(fiboEvenSum(34)); // 44
console.log(fiboEvenSum(60)); // 44
console.log(fiboEvenSum(1000)); // 798
console.log(fiboEvenSum(100000)); // 60696
console.log(fiboEvenSum(4000000)); // 4613732

// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------

/* 

  * P3 - Largest prime factor

  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the given number?

  Prime factors of a number are the set of prime numbers 
  which when multiplied by together give the actual number. 
  Also, we can say, 
  the prime factors divide the number completely
  
  A prime number is a whole number greater than 1 
  with exactly two divisors: 
  1 and itself. 

  For example, 
  2 is a prime number because it is only divisible by 1 and 2 
  In contrast, 4 is not prime 
  since it is divisible by 1, 2 and 4.

*/

function largestPrimeFactor(number) {
  let primeNumbers = [];

  // func to check if its a prime number or not
  function isPrime(x) {
    if (x <= 1) {
      return false;
    }
    for (let i = 2; i < x; i++) {
      if (x % i === 0) {
        return false;
      }
    }
    return true;
  }

  // loop and check:
  // first -> if the i a prime number using isPrime()
  // second -> if our number % i = 0 (PF divide the number completely)
  for (let i = 2; i <= number; i++) {
    if (isPrime(i)) {
      if (number % i === 0) {
        primeNumbers.push(i);
      }
    }
  }

  // get the max number "I kw I kw Math.max()"
  let maxVal = primeNumbers[0];
  for (let i = 1; i < primeNumbers.length; i++) {
    if (primeNumbers[i] > maxVal) {
      maxVal = primeNumbers[i];
    }
  }

  return maxVal;
}

console.log(largestPrimeFactor(2)); // 2
console.log(largestPrimeFactor(3)); // 3
console.log(largestPrimeFactor(5)); // 5
console.log(largestPrimeFactor(7)); // 7
console.log(largestPrimeFactor(8)); // 2
console.log(largestPrimeFactor(13195)); // 29
// console.log(largestPrimeFactor(600851475143)); // 6857
// its take a lot of time BUT its working

// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------

/* 

  * P4 - Largest palindrome product

  A palindromic number reads the same both ways. 

  The largest palindrome made from the product 
  of two 2-digit numbers is 9009 = 91 Ã— 99.

  Find the largest palindrome made from the product 
  of two n-digit numbers.

*/

function largestPalindromeProduct(n) {
  let nDigits = [];
  let palNumbers = [];
  let largestPal = 0;
  // get all possible numbers with n digits
  for (let i = 0; ; i++) {
    if (String(i).split("").length > n) {
      break;
    }
    nDigits.push(i);
  }
  // two loops, to get the all the products possible
  for (let i = nDigits.length - 1; i > 0; i--) {
    for (let j = nDigits.length - 1; j > 0; j--) {
      // temp hold the number in reverse
      let temp = String(nDigits[i] * nDigits[j])
        .split("")
        .reverse()
        .join("");
      // check if its palindrome
      if (nDigits[i] * nDigits[j] === parseInt(temp)) {
        palNumbers.push(nDigits[i] * nDigits[j]);
      }
    }
  }
  // get the largest palindrome
  for (let i = 0; i < palNumbers.length; i++) {
    if (palNumbers[i] > largestPal) {
      largestPal = palNumbers[i];
    }
  }
  return largestPal;
}

console.log(largestPalindromeProduct(2)); // 9009
// console.log(largestPalindromeProduct(3)); // 906609
// takes time

// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
