// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------

/* 
  * P1: Multiples of 3 and 5

  If we list all the natural numbers below 10 
  that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
  The sum of these multiples is 23.

  Find the sum of all the multiples of 3 or 5 below 
  the provided parameter value number.

*/

function multiplesOf3and5(number) {
  let multiples = [];
  for (let i = 1; i < number; i++) {
    if (i % 3 === 0 || i % 5 === 0) {
      multiples.push(i);
    }
  }
  let result = multiples.reduce((prev, next) => {
    return prev + next;
  });
  return result;
}

console.log(multiplesOf3and5(10)); // 23
console.log(multiplesOf3and5(49)); // 543
console.log(multiplesOf3and5(1000)); // 233168
console.log(multiplesOf3and5(8456)); // 16687353
console.log(multiplesOf3and5(19564)); // 89301183

// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------

/* 
  * P2: Even Fibonacci Numbers

  Each new term in the Fibonacci sequence is 
  generated by adding the previous two terms. 

  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence 
  whose values do not exceed n, 
  find the sum of the even-valued terms.

*/

function fiboEvenSum(n) {
  let prevNumber = 0;
  let currentNumber = 1;
  let sequence = [0, 1];
  let sum = 0;

  // function to get the Fibonacci numbers that are lessThan or equal to "num"
  function getFibonacciNumbers() {
    for (let i = 0; currentNumber <= n; i++) {
      currentNumber += prevNumber;
      // check again after the += if currenNumber <= num
      if (currentNumber <= n) {
        sequence.push(currentNumber);
      }
      // intialize the prevNumber
      prevNumber = currentNumber - prevNumber;
    }
    return sequence;
  }

  // to know the Fibonacci sequence
  // console.log(getFibonacciNumbers());

  // filter and get the EVEN numbers
  let evenNumbers = getFibonacciNumbers().filter((el) => el % 2 === 0);

  // SUM of the even numbers
  sum = evenNumbers.reduce((prev, next) => prev + next);

  return sum;
}

console.log(fiboEvenSum(8)); // 10
console.log(fiboEvenSum(10)); // 10
console.log(fiboEvenSum(34)); // 44
console.log(fiboEvenSum(60)); // 44
console.log(fiboEvenSum(1000)); // 798
console.log(fiboEvenSum(100000)); // 60696
console.log(fiboEvenSum(4000000)); // 4613732

// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
// * ------------------------------------------------------------
console.log("----------------------");
// * ------------------------------------------------------------
